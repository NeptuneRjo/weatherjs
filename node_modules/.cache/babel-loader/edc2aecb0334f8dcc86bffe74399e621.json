{"ast":null,"code":"var _jsxFileName = \"/home/neptunerjo/personal-projects/weather-app/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Body from './components/Body/Body';\nimport Header from './components/Header/Header';\nimport useFetch from './components/useFetch';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [location, setLocation] = useState('Tampa'); // const [data, setData] = useState(null);\n  // const [isPending, setIsPending] = useState(true);\n  // const [error, setError] = useState(null)\n  // Returns the JSON data, true while loading, and the error\n  // const {data, isPending, error} = newFetch(`http://api.openweathermap.org/data/2.5/weather?q=${location}&APPID=${process.env.REACT_APP_PUBLIC_KEY}`)\n  // const handleFetch = (newLocation) => {\n  //   const url = `http://api.openweathermap.org/data/2.5/weather?q=${location}&APPID=${process.env.REACT_APP_PUBLIC_KEY}`\n  //   const abortCont = new AbortController();\n  //   fetch(url, { signal: abortCont.signal })\n  //     .then(res => {\n  //       if (!res.ok) {\n  //         throw Error('could not fetch the data for that resource');\n  //       }\n  //       return res.json();\n  //     })\n  //     .then(data => {\n  //       setData(data);\n  //       setIsPending(false);\n  //       setError(null);\n  //       console.log(data);\n  //     })\n  //     .catch(err => {\n  //       if (err.name === 'AbortError') {\n  //         console.log('fetch aborted')\n  //       } else {\n  //         setError(err.message);\n  //         setIsPending(false);\n  //       }\n  //     });\n  //     return () => abortCont.abort();\n  // }\n  // handleFetch()\n\n  const handleLocation = userLocation => {\n    const newLocation = userLocation;\n    setLocation(newLocation);\n  }; // useEffect(() => {\n  //   handleFetch()\n  // }, [location])\n  // setLocation('Tampa')\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      handleLocation: handleLocation\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Body, {\n      location: location\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"zDiGPGttqLMYeH3sPV57Omxx0/Q=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/neptunerjo/personal-projects/weather-app/src/App.js"],"names":["React","useEffect","useState","Body","Header","useFetch","App","location","setLocation","handleLocation","userLocation","newLocation"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,MAAP,MAAmB,4BAAnB;AACA,OAAOC,QAAP,MAAqB,uBAArB;;;AAGA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAEhB,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BN,QAAQ,CAAC,OAAD,CAAxC,CAFgB,CAIhB;AACA;AACA;AAGA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;;AAEA,QAAMO,cAAc,GAAIC,YAAD,IAAkB;AACvC,UAAMC,WAAW,GAAGD,YAApB;AAEAF,IAAAA,WAAW,CAACG,WAAD,CAAX;AACD,GAJD,CA7CgB,CAmDhB;AACA;AACA;AAEA;;;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACI,QAAC,MAAD;AAAQ,MAAA,cAAc,EAAEF;AAAxB;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,IAAD;AAAM,MAAA,QAAQ,EAAEF;AAAhB;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD,CA/DD;;GAAMD,G;;KAAAA,G;AAiEN,eAAeA,GAAf","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport Body from './components/Body/Body';\nimport Header from './components/Header/Header';\nimport useFetch from './components/useFetch';\n\n\nconst App = () => {\n\n  const [location, setLocation] = useState('Tampa');\n\n  // const [data, setData] = useState(null);\n  // const [isPending, setIsPending] = useState(true);\n  // const [error, setError] = useState(null)\n\n\n  // Returns the JSON data, true while loading, and the error\n  // const {data, isPending, error} = newFetch(`http://api.openweathermap.org/data/2.5/weather?q=${location}&APPID=${process.env.REACT_APP_PUBLIC_KEY}`)\n\n\n  // const handleFetch = (newLocation) => {\n  //   const url = `http://api.openweathermap.org/data/2.5/weather?q=${location}&APPID=${process.env.REACT_APP_PUBLIC_KEY}`\n  //   const abortCont = new AbortController();\n\n  //   fetch(url, { signal: abortCont.signal })\n  //     .then(res => {\n  //       if (!res.ok) {\n  //         throw Error('could not fetch the data for that resource');\n  //       }\n  //       return res.json();\n  //     })\n  //     .then(data => {\n  //       setData(data);\n  //       setIsPending(false);\n  //       setError(null);\n  //       console.log(data);\n  //     })\n  //     .catch(err => {\n  //       if (err.name === 'AbortError') {\n  //         console.log('fetch aborted')\n  //       } else {\n  //         setError(err.message);\n  //         setIsPending(false);\n  //       }\n\n  //     });\n\n  //     return () => abortCont.abort();\n  // }\n\n  // handleFetch()\n\n  const handleLocation = (userLocation) => {\n    const newLocation = userLocation;\n\n    setLocation(newLocation);\n  }\n\n  // useEffect(() => {\n  //   handleFetch()\n  // }, [location])\n\n  // setLocation('Tampa')\n\n  return (\n    <div className=\"app\">\n        <Header handleLocation={handleLocation}/>\n        <Body location={location} />\n    </div>\n  )\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}